# Hugo站点构建和部署到GitHub Pages的工作流
name: Deploy Hugo site to Pages

on:
  # 在推送到默认分支时运行
  push:
    branches: ["main"]

  # 允许从Actions选项卡手动运行此工作流
  workflow_dispatch:

# 设置GITHUB_TOKEN的权限，以允许部署到GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 仅允许一个并发部署，跳过正在运行的部署和最新排队部署之间的运行。
# 但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成。
concurrency:
  group: "pages"
  cancel-in-progress: false

# 默认使用bash
defaults:
  run:
    shell: bash

jobs:
  # 构建任务
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.134.0
    steps:
      - name: 安装Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: 安装Dart Sass
        run: sudo snap install dart-sass
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: 设置Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: 安装Node.js依赖
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: 用Hugo构建
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
        run: |
          # 显示Hugo版本和环境信息
          hugo version
          
          # 生成网站内容，使用动态baseURL
          hugo \
            --minify \
            --verbose \
            --baseURL "${{ steps.pages.outputs.base_url }}/"
          
          # 确保404页面存在并包含客户端路由代码
          cp static/404.html public/404.html
          
          # 创建必要的目录结构以支持客户端路由
          # 确保分类目录存在
          for category in 网络架构 网络运维 网站维护 网络开发; do
            mkdir -p "public/categories/${category}"
            # 为每个分类复制index.html以支持客户端路由
            if [ -f "public/categories/${category}/index.html" ]; then
              echo "分类目录 ${category} 已有index.html文件"
            else
              echo "为分类 ${category} 创建空的index.html文件"
              echo "<html><head><meta http-equiv=\"refresh\" content=\"0;url=/#/categories/${category}\"></head></html>" > "public/categories/${category}/index.html"
            fi
          done
          
          # 确保年份目录存在
          for year in 2024 2025; do
            mkdir -p "public/year/${year}"
            # 为每个年份复制index.html以支持客户端路由
            if [ -f "public/year/${year}/index.html" ]; then
              echo "年份目录 ${year} 已有index.html文件"
            else
              echo "为年份 ${year} 创建空的index.html文件"
              echo "<html><head><meta http-equiv=\"refresh\" content=\"0;url=/#/year/${year}\"></head></html>" > "public/year/${year}/index.html"
            fi
          done
          
          # 创建.nojekyll文件防止GitHub Pages忽略下划线开头的文件
          touch public/.nojekyll
          
          # 列出生成的文件结构
          echo "生成的网站目录结构:"
          find public -type d -not -path "*/\.*" | sort
          
          echo "生成的HTML文件:"
          find public -name "*.html" | sort

      - name: 上传构建产物
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # 部署任务
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 部署到GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
